################
# Build pipeline
################
docker_plugin: &docker_plugin_configuration
  oasislabs/docker#v2.1.0-oasis4:
    image: "oasislabs/testing:0.3.0"
    always_pull: true
    workdir: /workdir
    volumes:
      - .:/workdir
      - /var/lib/buildkite-agent/.ssh:/root/.ssh
      - /var/lib/buildkite-agent/.coveralls:/root/.coveralls
      - /var/lib/buildkite-agent/.circleci:/root/.circleci
      - /var/lib/buildkite-agent/.buildkite:/root/.buildkite
      # Shared Rust incremental compile caches.
      - /tmp/cargo_ic/debug:/tmp/artifacts/debug/incremental
      - /tmp/cargo_ic/debug_sgx:/tmp/artifacts/x86_64-fortanix-unknown-sgx/debug/incremental
      # Shared Rust package checkouts directory.
      - /tmp/cargo_pkg/git:/root/.cargo/git
      - /tmp/cargo_pkg/registry:/root/.cargo/registry
      # Shared Rust SGX standard library artifacts cache.
      - /tmp/xargo_cache:/root/.xargo
      # Shared Go package checkouts directory.
      - /tmp/go_pkg:/root/go/pkg
    environment:
      - "LC_ALL=C.UTF-8"
      - "LANG=C.UTF-8"
      - "CARGO_TARGET_DIR=/tmp/artifacts"
      - "CARGO_INSTALL_ROOT=/root/.cargo"
      - "RUSTFLAGS=-C target-feature=+aes,+ssse3"
      - "EKIDEN_BRANCH=master"
      - "E2E_TESTS_BRANCH=master"
    propagate-environment: true
    unconfined: true

steps:

  - label: Code coverage
    command:
      - .buildkite/scripts/setup_gitconfig.sh
      - .buildkite/rust/code_coverage.sh

      # Save the report as a build artifact
      # so it can be easily accessed for debugging.
      - buildkite-agent artifact upload cobertura.xml
    # use default: exit-status: "*" and retry limit of 2
    retry:
      automatic: true
    agents:
      buildkite_agent_size: large
    plugins:
      <<: *docker_plugin_configuration

