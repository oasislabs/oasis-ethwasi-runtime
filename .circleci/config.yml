version: 2
jobs:
  build:
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout

      # Install Ekiden binaries.
      - run:
          environment:
            CARGO_TARGET_DIR: target
          command: >-
            cargo install
            --git https://github.com/oasislabs/ekiden
            --branch master
            --debug
            ekiden-tools
      - run:
          environment:
            CARGO_TARGET_DIR: target
          command: >-
            cargo install
            --git https://github.com/oasislabs/ekiden
            --branch master
            --debug
            ekiden-compute
      - run:
          environment:
            CARGO_TARGET_DIR: target
          command: >-
            cargo install
            --git https://github.com/oasislabs/ekiden
            --branch master
            --debug
            ekiden-node-dummy
      # Build the runtime.
      - run: cargo ekiden build-enclave --output-identity
      # Build the benchmarking version of the runtime (in release mode)
      - run: mkdir target_benchmark
      - run:
          name: Build the benchmarking version of the runtime
          environment:
            CARGO_TARGET_DIR: target_benchmark
          command: cargo ekiden build-enclave --output-identity --cargo-addendum feature.benchmark.addendum --target-dir target_benchmark --release -- --features "benchmark"
      # Run the runtime tests.
      - run:
          name: Run the runtime tests
          command: cargo test
      # Build the web3 gateway.
      - run:
          name: Build the web3 gateway
          environment:
            CARGO_TARGET_DIR: ../target
          working_directory: gateway
          command: cargo build
      # Run the gateway tests.
      - run:
          name: Run the gateway tests
          environment:
            CARGO_TARGET_DIR: ../target
          working_directory: gateway
          command: cargo test
      # Build the web3 microbenchmark.
      - run:
          name: Build the web3 microbenchmark
          environment:
            CARGO_TARGET_DIR: ../target
          working_directory: benchmark
          command: cargo build
      # Build the genesis state injector program.
      - run:
          name: Build the genesis state injector tool
          environment:
            CARGO_TARGET_DIR: ../target
          working_directory: genesis
          command: cargo build
      # Build the playback program.
      - run:
          name: Build the transaction playback tool
          environment:
            CARGO_TARGET_DIR: ../target
          working_directory: playback
          command: cargo build
      # Check style. This needs to be after everything is built.
      - run: cargo fmt -- --write-mode=check

      # End-to-end tests.
      - attach_workspace:
          at: /workspace
      - run: cp /workspace/go/bin/ekiden ekiden-node
      - run: ./scripts/test-e2e.sh
      - run: ./scripts/test-storage.sh

  build-go:
    working_directory: /go/src/github.com/oasislabs/
    docker:
      - image: circleci/golang:1.10
    steps:
      - restore_cache:
          keys:
            - go-cache
      - run: |
          wget 'https://github.com/google/protobuf/releases/download/v3.5.1/protoc-3.5.1-linux-x86_64.zip' && \
          sudo unzip protoc-3.5.1-linux-x86_64.zip -x readme.txt -d /usr && \
          rm protoc-3.5.1-linux-x86_64.zip && \
          sudo chmod a+rx /usr/bin/protoc
      - run: |
          go get -d github.com/golang/protobuf/protoc-gen-go && \
          cd $GOPATH/src/github.com/golang/protobuf && \
          git checkout v1.0.0 && \
          cd protoc-gen-go && \
          go install
      - run: |
          mkdir ~/.ssh && echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
          cd $GOPATH/src/github.com/oasislabs && \
          git clone --depth 1 git@github.com:/oasislabs/ekiden && \
          cd ekiden/go && \
          dep ensure && \
          go generate ./... && \
          go build -v -o ./ekiden/ekiden ./ekiden && \
          cd $GOPATH/src/github.com/oasislabs/ekiden/go/ekiden && \
          go install
      - save_cache:
          key: go-cache
          paths:
            - "/go/pkg"
      # Store built files.
      - persist_to_workspace:
          root: /
          paths:
            - go/bin

  set-docker-tag:
    docker:
      - image: circleci/python:3.6.6-jessie
    steps:
      # Setup version tracking environment variables
      - checkout
      - run: 
          name: Load docker tag versioning into environment
          command: ./scripts/determine-build-versioning.sh /tmp/build_image_tag

      # Save docker tag
      - persist_to_workspace:
          root: /tmp
          paths: 
            - build_image_tag

  build-and-publish-docker-image:
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      # Set this as a variable so it can be changed quickly if necessary
      - run: echo 'export STAGING_TAG=staging' >> $BASH_ENV
      - checkout
      - setup_remote_docker
    
      - attach_workspace:
          at: /workspace

      - run: 
          name: Load current docker build tag
          command: echo "export BUILD_IMAGE_TAG=$(cat /workspace/build_image_tag)" >> $BASH_ENV

      # Build deployment image.
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
          BUILD_IMAGES_NO_ENTER=1 ./docker/deployment/build-images.sh

      - run: 
          name: Push deployment image
          command: docker push oasislabs/ekiden-runtime-ethereum:$BUILD_IMAGE_TAG

      - run: 
          name: Tag the build image as the latest staging image
          command: docker tag oasislabs/ekiden-runtime-ethereum:$BUILD_IMAGE_TAG oasislabs/ekiden-runtime-ethereum:$STAGING_TAG
  
      - run: 
          name: Publish as the latest staging image
          command: docker push oasislabs/ekiden-runtime-ethereum:$STAGING_TAG

  deploy-to-staging:
    docker:
      - image: ekiden/testing:0.2.0
    steps:
      - checkout
      - attach_workspace:
          at: /workspace

      - run: 
          name: Load current docker build tag
          command: echo "export BUILD_IMAGE_TAG=$(cat /workspace/build_image_tag)" >> $BASH_ENV

      - run:
          name: Trigger a buildhook that triggers a staging deploy
          command: ./scripts/buildhook-notify.sh staging oasislabs/runtime-ethereum $BUILD_IMAGE_TAG master $CIRCLE_TOKEN

  promote-to-production:
    docker:
      - image: ekiden/testing:0.2.0
    steps:
      # Set this as a variable so it can be changed quickly if necessary
      - run: echo 'export PRODUCTION_TAG=latest' >> $BASH_ENV

      - attach_workspace:
          at: /workspace

      - run: 
          name: Load current docker build tag
          command: echo "export BUILD_IMAGE_TAG=$(cat /workspace/build_image_tag)" >> $BASH_ENV

      - run: 
          name: Login to docker
          command: echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
      
      - run:
          name: Download the tag of ekiden for this current workflow
          command: docker pull oasislabs/ekiden-runtime-ethereum:$BUILD_IMAGE_TAG

      - run:
          name: Tag the ekiden build on this workflow for production
          command: docker tag oasislabs/ekiden-runtime-ethereum:$BUILD_IMAGE_TAG oasislabs/runtime-ethereum:$PRODUCTION_TAG

      - run:
          name: Push the new production tag of ekiden to dockerhub
          command: docker push oasislabs/ekiden-runtime-ethereum:$PRODUCTION_TAG

  deploy-to-production:
    docker:
      - image: ekiden/testing:0.2.0
    steps:
      - attach_workspace:
          at: /workspace

      - run: 
          name: Load current docker build tag
          command: echo "export BUILD_IMAGE_TAG=$(cat /workspace/build_image_tag)" >> $BASH_ENV

      - run:
          name: Trigger a buildhook that triggers a production deploy
          command: ./scripts/buildhook-notify.sh production oasislabs/runtime-ethereum $BUILD_IMAGE_TAG master $CIRCLE_TOKEN

  benchmark:
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout
      - setup_remote_docker

      # Build benchmarking image.
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
          BUILD_IMAGES_NO_ENTER=1 ./docker/benchmarking/build-images.sh

      # Push benchmarking image.
      - run: docker push oasislabs/ekiden-runtime-ethereum:benchmarking-latest

      # Trigger private-ops to run the benchmark.
      - run: |
          benchmark_image=$(docker inspect --format='{{index .RepoDigests 0}}' oasislabs/ekiden-runtime-ethereum:benchmarking-latest)
          mr_enclave=$(cat target/enclave/runtime-ethereum.mrenclave)
          curl -f \
            -H "Content-Type: application/json" \
            -d '{
              "revision": "master",
              "build_parameters": {
                "CIRCLE_JOB": "benchmark-runtime-ethereum",
                "BENCHMARK_IMAGE": "'"$benchmark_image"'",
                "BENCHMARK_BUILD_NUM": "'"$CIRCLE_BUILD_NUM"'",
                "BENCHMARK_MR_ENCLAVE": "'"$mr_enclave"'"
              }
            }' \
            "https://circleci.com/api/v1.1/project/github/oasislabs/private-ops/tree/master?circle-token=$CIRCLE_TOKEN"

workflows:
  version: 2
  build:
    jobs:
      - build-go
      - build:
          requires:
           - build-go
      - set-docker-tag:
          filters:
            branches:
              only: master
      - build-and-publish-docker-image:
          filters:
            branches:
              only: master
          requires:
            - build
            - set-docker-tag
      - deploy-to-staging:
          filters:
            branches:
              only: master
          requires:
            - build-and-publish-docker-image
      - hold-for-production:
          type: approval
          requires:
            - deploy-to-staging
      - promote-to-production:
          requires:
            - hold-for-production
      - deploy-to-production:
          requires:
            - promote-to-production
  benchmarking:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - benchmark

experimental:
  notify:
    branches:
      only:
        - master
