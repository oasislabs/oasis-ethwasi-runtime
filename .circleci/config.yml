version: 2
jobs:
  build:
    docker:
      - image: ekiden/testing:0.1.0
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout

      # Install Ekiden binaries.
      - run:
          environment:
            CARGO_TARGET_DIR: target
          command: >-
            cargo install
            --git https://github.com/oasislabs/ekiden
            --branch master
            --debug
            ekiden-tools
      - run:
          environment:
            CARGO_TARGET_DIR: target
          command: >-
            cargo install
            --git https://github.com/oasislabs/ekiden
            --branch master
            --debug
            ekiden-compute
      - run:
          environment:
            CARGO_TARGET_DIR: target
          command: >-
            cargo install
            --git https://github.com/oasislabs/ekiden
            --branch master
            --debug
            ekiden-node-dummy
      # Build the contract.
      - run: cargo ekiden build-contract --output-identity
      # Build the benchmarking version of the contract.
      - run: mkdir target_benchmark
      - run:
          environment:
            CARGO_TARGET_DIR: target_benchmark
          command: cargo ekiden build-contract --output-identity --cargo-addendum feature.benchmark.addendum --target-dir target_benchmark -- --features "benchmark"
      # Run the contract tests.
      - run: cargo test
      # Build the client.
      - run:
          environment:
            CARGO_BUILD_TARGET_DIR: ../target
          working_directory: client
          command: cargo build
      # Build the genesis program.
      - run:
          environment:
            CARGO_BUILD_TARGET_DIR: ../target
          working_directory: genesis
          command: cargo build
      # Build the playback program.
      - run:
          environment:
            CARGO_BUILD_TARGET_DIR: ../target
          working_directory: playback
          command: cargo build
      # Check style. This needs to be after everything is built.
      - run: cargo fmt -- --write-mode=check

      # Contract end-to-end tests.

      # Start shared dummy node.
      - run:
          command: ekiden-node-dummy --time-source mockrpc --storage-backend dummy
          background: true
      # Start EVM compute node.
      - run:
          command: ekiden-compute target/contract/evm.so --identity-file identity-evm.pb --max-batch-timeout 10
          background: true
      # Advance epoch.
      - run: |
          # Sleep so everything gets ready.
          sleep 10

          # Advance epoch to elect a new committee.
          ekiden-node-dummy-controller set-epoch --epoch 1

          # Sleep some more.
          sleep 5
      # Start web3 proxy.
      - run:
          command: ./target/debug/web3-client --mr-enclave $(cat ../target/contract/evm.mrenclave)
          background: true
      # TODO: Run a test script.
      # - run:
      #     working_directory: scripts
      #     command: ./test_counter.sh

  deploy:
    docker:
      - image: ekiden/testing:0.1.0-alpha.4
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout
      - setup_remote_docker

      # Build deployment image.
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
          BUILD_IMAGES_NO_ENTER=1 ./docker/deployment/build-images.sh
      # Push deployment image.
      - run: docker push oasislabs/ekiden-contract-evm:latest
      # Update testnet.
      # https://stackoverflow.com/a/33511811/1864688
      - run: |
          REPO_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' oasislabs/ekiden-contract-evm:latest)
          mkdir -p ~/.kube
          echo "$KUBECONFIG_CONTENT_BASE64" | base64 -di >~/.kube/config
          kubectl set image deployments/evm-node-dummy ekiden-node-dummy=$REPO_DIGEST
          kubectl set image deployments/evm ekiden-compute=$REPO_DIGEST
          kubectl set image deployments/web3-client web3-client=$REPO_DIGEST

workflows:
  version: 2
  build:
    jobs:
      - build
      - deploy:
          filters:
            branches:
              only: master
          requires:
            - build
experimental:
  notify:
    branches:
      only:
        - master
