version: 2
jobs:
  build:
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout

      # Install Ekiden binaries.
      - run:
          environment:
            CARGO_TARGET_DIR: target
          command: >-
            cargo install
            --git https://github.com/oasislabs/ekiden
            --branch master
            --debug
            ekiden-tools
      - run:
          environment:
            CARGO_TARGET_DIR: target
          command: >-
            cargo install
            --git https://github.com/oasislabs/ekiden
            --branch master
            --debug
            ekiden-compute
      - run:
          environment:
            CARGO_TARGET_DIR: target
          command: >-
            cargo install
            --git https://github.com/oasislabs/ekiden
            --branch master
            --debug
            ekiden-node-dummy
      # Build the runtime.
      - run: cargo ekiden build-enclave --output-identity
      # Build the benchmarking version of the runtime (in release mode)
      - run: mkdir target_benchmark
      - run:
          name: Build the benchmarking version of the runtime
          environment:
            CARGO_TARGET_DIR: target_benchmark
          command: cargo ekiden build-enclave --output-identity --cargo-addendum feature.benchmark.addendum --target-dir target_benchmark --release -- --features "benchmark"
      # Run the runtime tests.
      - run:
          name: Run the runtime tests
          command: cargo test
      # Build the web3 gateway.
      - run:
          name: Build the web3 gateway
          environment:
            CARGO_BUILD_TARGET_DIR: ../target
          working_directory: gateway
          command: cargo build
      # Run the gateway tests.
      - run:
          name: Run the gateway tests
          environment:
            CARGO_BUILD_TARGET_DIR: ../target
          working_directory: gateway
          command: cargo test
      # Build the web3 microbenchmark.
      - run:
          name: Build the web3 microbenchmark
          environment:
            CARGO_BUILD_TARGET_DIR: ../target
          working_directory: benchmark
          command: cargo build
      # Build the genesis state injector program.
      - run:
          name: Build the genesis state injector tool
          environment:
            CARGO_BUILD_TARGET_DIR: ../target
          working_directory: genesis
          command: cargo build
      # Build the playback program.
      - run:
          name: Build the transaction playback tool
          environment:
            CARGO_BUILD_TARGET_DIR: ../target
          working_directory: playback
          command: cargo build
      # Check style. This needs to be after everything is built.
      - run: cargo fmt -- --write-mode=check

      # End-to-end tests.
      - run: ./scripts/test-e2e.sh

  deploy:
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout
      - setup_remote_docker

      # Build deployment image.
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
          BUILD_IMAGES_NO_ENTER=1 ./docker/deployment/build-images.sh
      # Push deployment image.
      - run: docker push oasislabs/ekiden-runtime-ethereum:$CIRCLE_SHA1
      # Update testnet.
      # https://stackoverflow.com/a/33511811/1864688
      - run: |
          REPO_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' oasislabs/ekiden-runtime-ethereum:latest)
          mkdir -p ~/.kube
          echo "$KUBECONFIG_CONTENT_BASE64" | base64 -di >~/.kube/config
          kubectl set image deployments/runtime-node-dummy ekiden-node-dummy=$REPO_DIGEST
          kubectl set image deployments/runtime ekiden-compute=$REPO_DIGEST
          kubectl set image deployments/web3-gateway web3-gateway=$REPO_DIGEST

workflows:
  version: 2
  build:
    jobs:
      - build
      - deploy:
          requires:
            - build
experimental:
  notify:
    branches:
      only:
        - master
