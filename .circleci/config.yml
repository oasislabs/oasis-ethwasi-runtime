version: 2
jobs:
  build-and-test-runtime:
    # The purpose of this job is to ensure
    # that the runtime code compiles
    # and tests pass.
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV

      # Check out source from github
      - checkout

      - run:
          name: Install ekiden-tools
          command: cargo install
                     --git https://github.com/oasislabs/ekiden
                     --branch master
                     --debug
                     ekiden-tools
      - run:
          name: Build the runtime
          command: cargo ekiden build-enclave --output-identity
      - run:
          name: Check source code style
          command: cargo fmt -- --write-mode=check
      - persist_to_workspace:
          # Save files for use in the
          # end-to-end-tests job.
          root: .
          paths:
            - target/enclave/runtime-ethereum.so
            - target/enclave/runtime-ethereum.mrenclave
      - run:
          name: Run the runtime tests
          command: cargo test

  build-runtime-benchmark:
    # The purpose of this job is to ensure
    # that the runtime-benchmark code compiles.
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV

      # Check out source from github
      - checkout

      - run:
          name: Install ekiden-tools
          command: cargo install
                     --git https://github.com/oasislabs/ekiden
                     --branch master
                     --debug
                     ekiden-tools
      - run:
          name: Build the benchmarking version of the runtime
          command: cargo ekiden build-enclave
                     --output-identity
                     --cargo-addendum feature.benchmark.addendum
                     --
                     --features "benchmark"

  build-and-test-web3-gateway:
    # The purpose of this job is to ensure
    # that the web3-gateway code compiles
    # and tests pass.
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV

      # Check out source from github
      - checkout

      - run:
          name: Build the web3 gateway
          working_directory: gateway
          command: cargo build
      - persist_to_workspace:
          # Save gateway for use in the
          # end-to-end-tests job.
          root: .
          paths:
            - target/debug/gateway
      - run:
          name: Run the web3 gateway tests
          working_directory: gateway
          command: cargo test

  build-genesis:
    # The purpose of this job is to ensure
    # that the gensis code compiles. Currently,
    # there are no tests to run, but they should
    # run here once we write them.
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV

      # Check out source from github
      - checkout

      - run:
          name: Build the genesis state injector tool
          working_directory: genesis
          command: cargo build

  build-playback:
    # The purpose of this job is to ensure
    # that the playback code compiles. Currently,
    # there are no tests to run, but they should
    # run here once we write them.
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV

      # Check out source from github
      - checkout

      - run:
          name: Build the transaction playback tool
          working_directory: playback
          command: cargo build

  build-run-contract:
    # The purpose of this job is to ensure
    # that the run_contract code compiles.
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV

      # Check out source from github
      - checkout

      - run:
          name: Build run-contract
          working_directory: tests/run_contract
          command: cargo build

  build-go:
    working_directory: /go/src/github.com/oasislabs/
    docker:
      - image: circleci/golang:1.10
    steps:
      - restore_cache:
          keys:
            - go-cache

      # Check out source from github
      - checkout

      - run: |
          wget 'https://github.com/google/protobuf/releases/download/v3.5.1/protoc-3.5.1-linux-x86_64.zip' && \
          sudo unzip protoc-3.5.1-linux-x86_64.zip -x readme.txt -d /usr && \
          rm protoc-3.5.1-linux-x86_64.zip && \
          sudo chmod a+rx /usr/bin/protoc
      - run: |
          go get -d github.com/golang/protobuf/protoc-gen-go && \
          cd $GOPATH/src/github.com/golang/protobuf && \
          git checkout v1.0.0 && \
          cd protoc-gen-go && \
          go install
      - run: |
          mkdir ~/.ssh && echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==' >> ~/.ssh/known_hosts
          cd $GOPATH/src/github.com/oasislabs && \
          git config --global --add url."git@github.com:".insteadOf "https://github.com/" && \
          git clone --depth 1 git@github.com:/oasislabs/ekiden && \
          cd ekiden/go && \
          dep ensure && \
          go generate ./... && \
          go build -v -o ./ekiden/ekiden ./ekiden && \
          cd $GOPATH/src/github.com/oasislabs/ekiden/go/ekiden && \
          go install
      - run: |
          cd benchmark && \
          make && \
          cp benchmark /go/bin
      - save_cache:
          key: go-cache
          paths:
            - "/go/pkg"
      # Store built files.
      - persist_to_workspace:
          root: /
          paths:
            - go/bin

  end-to-end-tests:
    # The purpose of this job is to run
    # the end-to-end tests.
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV

      # Check out source from github
      - checkout

      - run:
          name: Install ekiden-tools
          command: cargo install
                     --git https://github.com/oasislabs/ekiden
                     --branch master
                     --debug
                     ekiden-tools
      - run:
          name: Install ekiden-compute
          command: cargo install
                     --git https://github.com/oasislabs/ekiden
                     --branch master
                     --debug
                     ekiden-compute

      # Attach CircleCI workspace (temp storage for this workflow run)
      - attach_workspace:
          at: /workspace

      # Copy required resources from the workspace
      - run:
          name: Copy ekiden-node from workspace
          command: cp /workspace/go/bin/ekiden ekiden-node
      - run:
          name: Ensure target directory exists
          command: mkdir -p target
      - run:
          name: Copy contents of workspace target dir to target dir on agent
          command: cp -R /workspace/target/* target/

      # Run setup script
      - run:
          name: Run setup script
          command: ./scripts/setup-e2e.sh

      # Run gateway RPC tests
      - run:
          name: Run gateway RPC tests
          command: ./scripts/test-rpc.sh

      # Run the end-to-end test
      - run:
          name: Run the end-to-end test
          command: ./scripts/test-e2e.sh

      # Run the web3c.js tests
      - run:
          name: Run the web3c.js tests
          command: ./scripts/test-web3cjs.sh

      # Run web3.js pubsub test
      - run:
          name: Web3.js pubsub test
          command: ./scripts/test-pubsub.sh
      # Run the basic wasm contract test
      - run:
          name: Basic wasm contract test
          command: ./scripts/test-basic-wasm.sh
      # Run the storage contract test
      - run:
          name: Storage contract test
          command: ./scripts/test-storage.sh


      # Run the rust logistic contract test
      - run:
          name: Rust logistic contract test
          command: ./scripts/test_rust_logistic.sh

  set-docker-tag:
    # The purpose of this job is to determine
    # the tag to use for docker image versioning
    # and putting that value into the CircleCI
    # workspace for use in other jobs in the
    # workflow.
    docker:
      - image: circleci/python:3.6.6-jessie
    steps:
      - checkout
      - run:
          name: Load docker tag versioning into environment
          command: ./scripts/determine-build-versioning.sh /tmp/build_image_tag

      - persist_to_workspace:
          # Save docker tag
          root: /tmp
          paths:
            - build_image_tag

  build-and-publish-docker-image:
    ##
    # The purpose of this job is to build
    # and publish docker images for the
    # current branch or PR.
    #
    # The image is tagged with the value determined
    # in the set-docker-tag job, which is retrieved
    # from the workspace in this job.
    #
    # NOTE: The published image will NOT be tagged
    #       as the staging image until the
    #       deploy-to-staging job.
    ##
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout
      - setup_remote_docker

      - attach_workspace:
          at: /workspace

      - run:
          name: Load current docker build tag
          command: echo "export BUILD_IMAGE_TAG=$(cat /workspace/build_image_tag)" >> $BASH_ENV

      # Build deployment image.

      - run:
          name: Login to docker
          command: echo "$DOCKERHUB_PASSWORD" |
                   docker login
                     --username "$DOCKERHUB_USERNAME"
                     --password-stdin

      - run:
          name: Build deployment image
          command: BUILD_IMAGES_NO_ENTER=1 ./docker/deployment/build-images.sh

      - run:
          name: Push deployment image
          command: docker push
                     oasislabs/ekiden-runtime-ethereum:$BUILD_IMAGE_TAG

  deploy-to-staging:
    ##
    # The purpose of this job is to deploy the docker
    # image built and published in this workflow
    # to the staging environment.
    #
    # The docker image is tagged as the latest staging
    # image and published to Docker Hub before this
    # job triggers a deploy in the private-ops project.
    ##
    docker:
      - image: ekiden/testing:0.2.0
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /workspace

      - run:
          name: Load current docker build tag
          command: echo "export BUILD_IMAGE_TAG=$(cat /workspace/build_image_tag)" >> $BASH_ENV

      - run:
          # Defining this as a variable helps remain DRY and
          # allows for easy changing if necessary.
          name: Set STAGING_TAG env var to 'staging'
          command: echo 'export STAGING_TAG=staging' >> $BASH_ENV

      - run:
          name: Login to docker
          command: echo "$DOCKERHUB_PASSWORD" |
                   docker login
                     --username "$DOCKERHUB_USERNAME"
                     --password-stdin

      - run:
          name: Pull the build image from Docker Hub
          command: docker pull
                     oasislabs/ekiden-runtime-ethereum:$BUILD_IMAGE_TAG

      - run:
          name: Tag the build image as the latest staging image
          command: docker tag
                     oasislabs/ekiden-runtime-ethereum:$BUILD_IMAGE_TAG
                     oasislabs/ekiden-runtime-ethereum:$STAGING_TAG

      - run:
          name: Push latest staging image to Docker Hub
          command: docker push
                     oasislabs/ekiden-runtime-ethereum:$STAGING_TAG

      - run:
          name: Trigger a deploy to the staging env in the private-ops project
          command: ./scripts/buildhook-notify.sh
                     staging
                     oasislabs/runtime-ethereum
                     $BUILD_IMAGE_TAG
                     master
                     $CIRCLE_TOKEN

  promote-to-production:
    ##
    # The purpose of this job is to promote the docker
    # image built in this workflow to the production
    # image.
    #
    # The docker image is tagged as the latest production
    # image and published to Docker Hub.
    ##
    docker:
      - image: ekiden/testing:0.2.0
    steps:
      # Set this as a variable so it can be changed quickly if necessary
      - run: echo 'export PRODUCTION_TAG=latest' >> $BASH_ENV
      - setup_remote_docker
      - attach_workspace:
          at: /workspace

      - run:
          name: Load current docker build tag
          command: echo "export BUILD_IMAGE_TAG=$(cat /workspace/build_image_tag)" >> $BASH_ENV

      - run:
          name: Login to docker
          command: echo "$DOCKERHUB_PASSWORD" |
                   docker login
                     --username "$DOCKERHUB_USERNAME"
                     --password-stdin

      - run:
          name: Download the tag of ekiden for this current workflow
          command: docker pull
                     oasislabs/ekiden-runtime-ethereum:$BUILD_IMAGE_TAG

      - run:
          name: Tag the ekiden build on this workflow for production
          command: docker tag
                     oasislabs/ekiden-runtime-ethereum:$BUILD_IMAGE_TAG
                     oasislabs/ekiden-runtime-ethereum:$PRODUCTION_TAG

      - run:
          name: Push the new production tag of ekiden to dockerhub
          command: docker push
                     oasislabs/ekiden-runtime-ethereum:$PRODUCTION_TAG

  deploy-to-production:
    ##
    # The purpose of this job is to deploy the image
    # built in this workflow to the production environment.
    #
    # This job triggers a deploy in the private-ops project.
    ##
    docker:
      - image: ekiden/testing:0.2.0
    steps:
      - checkout
      - attach_workspace:
          at: /workspace

      - run:
          name: Load current docker build tag
          command: echo "export BUILD_IMAGE_TAG=$(cat /workspace/build_image_tag)" >> $BASH_ENV

      - run:
          name: Trigger a buildhook that triggers a production deploy
          command: ./scripts/buildhook-notify.sh
                     production
                     oasislabs/runtime-ethereum
                     $BUILD_IMAGE_TAG
                     master
                     $CIRCLE_TOKEN

  cover-rust:
    docker:
      - image: ekiden/testing:0.2.0
        environment:
          RUST_BACKTRACE: "1"
    resource_class: xlarge
    steps:
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout
      # Install tarpaulin.
      - run:
          name: Installing Tarpaulin
          command: RUSTFLAGS="--cfg procmacro2_semver_exempt" cargo install --git https://github.com/oasislabs/tarpaulin --branch ekiden cargo-tarpaulin
      # Workaround to avoid linker errors in tarpaulin: disable cargo build script.
      - run:
          name: Disable cargo build script
          command: echo 'fn main() {}' > build.rs
      - run:
          name: Run tests
          command: cargo tarpaulin
                     --packages runtime-ethereum
                     --packages runtime-ethereum-common
                     --packages web3-gateway
                     --exclude-files *generated*
                     --exclude-files genesis*
                     --exclude-files node_modules*
                     --ignore-tests
                     --out Xml
                     --coveralls $COVERALLS_REPO_TOKEN
                     -v
      # Store coverage report.
      - persist_to_workspace:
          root: .
          paths:
            - cobertura.xml

  benchmark:
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      # Set up
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV
      - checkout
      - setup_remote_docker

      # Build benchmarking image.
      - run: |
          echo "$DOCKERHUB_PASSWORD" | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
          BUILD_IMAGES_NO_ENTER=1 ./docker/benchmarking/build-images.sh

      # Push benchmarking image.
      - run: docker push oasislabs/ekiden-runtime-ethereum:benchmarking-latest

      # Trigger private-ops to run the benchmark.
      - run: |
          benchmark_image=$(docker inspect --format='{{index .RepoDigests 0}}' oasislabs/ekiden-runtime-ethereum:benchmarking-latest)
          mr_enclave=$(cat target/enclave/runtime-ethereum.mrenclave)
          curl -f \
            -H "Content-Type: application/json" \
            -d '{
              "revision": "master",
              "build_parameters": {
                "CIRCLE_JOB": "benchmark-runtime-ethereum",
                "BENCHMARK_IMAGE": "'"$benchmark_image"'",
                "BENCHMARK_BUILD_NUM": "'"$CIRCLE_BUILD_NUM"'",
                "BENCHMARK_MR_ENCLAVE": "'"$mr_enclave"'"
              }
            }' \
            "https://circleci.com/api/v1.1/project/github/oasislabs/private-ops/tree/master?circle-token=$CIRCLE_TOKEN"
  dapp-tests:
    docker:
      - image: ekiden/testing:0.2.0
    resource_class: xlarge
    steps:
      - run: echo 'PS1='"'"'\$ '"'"'; . /root/.bashrc' >> $BASH_ENV
      - run: echo 'export SGX_MODE=SIM' >> $BASH_ENV
      - run: echo 'export INTEL_SGX_SDK=/opt/sgxsdk' >> $BASH_ENV
      - run: echo 'export EKIDEN_UNSAFE_SKIP_AVR_VERIFY=1' >> $BASH_ENV

      - checkout

      - run:
          name: Install ekiden-tools
          command: cargo install
                     --git https://github.com/oasislabs/ekiden
                     --branch master
                     --debug
                     ekiden-tools
      - run:
          name: Install ekiden-compute
          command: cargo install
                     --git https://github.com/oasislabs/ekiden
                     --branch master
                     --debug
                     ekiden-compute
      # Attach CircleCI workspace (temp storage for this workflow run)
      - attach_workspace:
          at: /workspace
      # Copy required resources from the workspace
      - run:
          name: Copy ekiden-node from workspace
          command: cp /workspace/go/bin/ekiden ekiden-node
      - run:
          name: Ensure target directory exists
          command: mkdir -p target
      - run:
          name: Copy contents of workspace target dir to target dir on agent
          command: cp -R /workspace/target/* target/
      # Finally run the tests
      - run:
          name: Run all contract test suites from external dapps
          command: ./scripts/test-dapps.sh
          no_output_timeout: 20m

workflows:
  version: 2
  build_and_test_and_release:
    jobs:
      - set-docker-tag
      - build-go
      - build-and-test-runtime
      - build-runtime-benchmark
      - build-and-test-web3-gateway
      - build-genesis
      - build-playback
      - build-run-contract
      - cover-rust
      - dapp-tests:
          requires:
            - build-go
            - build-and-test-runtime
            - build-and-test-web3-gateway
      - end-to-end-tests:
          requires:
            - build-go
            - build-and-test-runtime
            - build-and-test-web3-gateway
      - build-and-publish-docker-image:
          filters:
            branches:
              only: master
          requires:
            - set-docker-tag
      - deploy-to-staging:
          filters:
            branches:
              only: master
          requires:
            # Requires end-to-end-test job so that deploy
            # will only happen if all tests succeed.
            - end-to-end-tests
            - build-and-publish-docker-image
            - build-go
            - build-and-test-runtime
            - build-runtime-benchmark
            - build-and-test-web3-gateway
            - build-genesis
            - build-playback
            - build-run-contract
      - hold-for-production:
          type: approval
          filters:
            branches:
              only: master
          requires:
            - deploy-to-staging
      - promote-to-production:
          filters:
            branches:
              only: master
          requires:
            - hold-for-production
      - deploy-to-production:
          filters:
            branches:
              only: master
          requires:
            - promote-to-production
  benchmarking:
    triggers:
      - schedule:
          cron: "0 1 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - benchmark

experimental:
  notify:
    branches:
      only:
        - master
